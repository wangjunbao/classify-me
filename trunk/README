Advanced Database System Project 2

a) Your name and your partner's name

Mariya Riskova (mdr2134) Chaoqing Lu (cl2814)

b) A list of all the files that you are submitting;
	
Write-up: 
	./README
Files containing the provided queries (used for probing):
	./root.txt
	./sports.txt
	./health.txt
	./computers.txt
Source Code: 
	./classiy/Category.java
	./classify/GetWordLynx.java
	./classify/SearchResult.java
	./classify/ClassifyMe.java
Makefile:
	./Makefile

c) A clear description of how to run your program (note that your project must compile/run under Linux in your CS account);

1. run "make"
2. run the program by typing

TODO: I will try to fix this before submitting (right now it does not work)

    java classify.ClassifyMe <database> <specificity> <coverage> <appId>
EXAMPLE: java classify/ClassifyMe yahoo.com 0.25 100 "Iu5udbvV34Fcg3uDwfJMTEY8Lb09.yMmFTaf7axWid3g4LmEN3G3iBUs6pa6jrRE"
	
d) A clear description of the internal design of your project, for each part of the project

The program has four classes. ClassifyMe is the main functional class. 
It contains both the web database classification and metasearching over web 
database (and building content summaries).
We have created a class Category which represents a given Category.
The last two classes we have built are:
- SearchResult which represents a particular page result returned by Yahoo.
- GetWordsLynx which is a wrapup around the execution of Lynx (the text browser used for page crawling)

Part 1: Web Database Classification

In order to classify web database we first built the 2-level categorization 
scheme (the category hierarchy). We then implement the query probing algorithm 
described in Figure 4 of the QProber paper without the confusion matrix. 
The function which implements this is called "classify", and internally it 
uses function "probe" in order to probe the database with a particular query. 
As required by the project we take all queries for probing from file named as 
the category name.
We update the coverage and specificity for the subcategories of category c as follows:

coverage(subcategory i of c) = sum of all hits when probing with quiries for subcategory i

specificity(subcategory i of c) = (specificity(c)) * (coverage(subcategory i of c)) / (sum of all hits when probing with quiries for any subcategory of c)

This is exactly as desribed in def. 3.2 and 3.3 in the QProber paper.

Then in the main function we call classify with parameter root (which has specificity 1.0). 
Thus, we start our classification procedure from the top.

Part 2: Metasearching over Web Databases

For implement part 2, we first store all the top 4 search result urls for  
each query(stored as hashtable<String> named queries) of each category in 
a hashtable(named samples) which will help us to eliminate duplicated urls 
returned from each query. 
Then Once we have the database classification from part 1, we go through 
each category node use recursive call of function extractSummary(). 
For each node, we use iterator of key set of hashtable to iterate all the urls 
samples(Category.samples) for such category node.
Then we call the GetWordLynx which will call lynx to crawl on the web return 
all the non duplicated words(We changed the GetWordLynx class. We use hashtable 
to store the word set instead of TreeSet) for each document of every url stored 
in the sample structure.
Once we get the words back, we will use hashtable to make word frequency statistic
and put each new word(unhashed word) in a TreeSet structure which can help us to 
sort words in alphabetical order. Then we will get iterator of such TreeSet 
and output each word count to certain file in alphabetical order.

e) Your Yahoo! Search BOSS Application ID

Search BOSS Application ID: Iu5udbvV34Fcg3uDwfJMTEY8Lb09.yMmFTaf7axWid3g4LmEN3G3iBUs6pa6jrRE

f) Any additional information that you consider significant. 

